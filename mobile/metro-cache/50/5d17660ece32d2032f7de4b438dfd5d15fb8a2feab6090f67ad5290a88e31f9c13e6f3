{"dependencies":[{"name":"is-what","data":{"isAsync":false}}],"output":[{"data":{"code":"__d(function (global, _$$_REQUIRE, _$$_IMPORT_DEFAULT, _$$_IMPORT_ALL, module, exports, _dependencyMap) {\n  'use strict';\n\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n\n  var isWhat = _$$_REQUIRE(_dependencyMap[0], \"is-what\");\n\n  function assignProp(carry, key, newVal, originalObject) {\n    var propType = originalObject.propertyIsEnumerable(key) ? 'enumerable' : 'nonenumerable';\n    if (propType === 'enumerable') carry[key] = newVal;\n\n    if (propType === 'nonenumerable') {\n      Object.defineProperty(carry, key, {\n        value: newVal,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      });\n    }\n  }\n\n  function mergeRecursively(origin, newComer, extensions) {\n    if (!isWhat.isPlainObject(newComer)) {\n      if (extensions && isWhat.isArray(extensions)) {\n        extensions.forEach(function (extend) {\n          newComer = extend(origin, newComer);\n        });\n      }\n\n      return newComer;\n    }\n\n    var newObject = {};\n\n    if (isWhat.isPlainObject(origin)) {\n      var props_1 = Object.getOwnPropertyNames(origin);\n      var symbols_1 = Object.getOwnPropertySymbols(origin);\n      newObject = props_1.concat(symbols_1).reduce(function (carry, key) {\n        var targetVal = origin[key];\n\n        if (!isWhat.isSymbol(key) && !Object.getOwnPropertyNames(newComer).includes(key) || isWhat.isSymbol(key) && !Object.getOwnPropertySymbols(newComer).includes(key)) {\n          assignProp(carry, key, targetVal, origin);\n        }\n\n        return carry;\n      }, {});\n    }\n\n    var props = Object.getOwnPropertyNames(newComer);\n    var symbols = Object.getOwnPropertySymbols(newComer);\n    var result = props.concat(symbols).reduce(function (carry, key) {\n      var newVal = newComer[key];\n      var targetVal = isWhat.isPlainObject(origin) ? origin[key] : undefined;\n\n      if (extensions && isWhat.isArray(extensions)) {\n        extensions.forEach(function (extend) {\n          newVal = extend(targetVal, newVal);\n        });\n      }\n\n      if (targetVal !== undefined && isWhat.isPlainObject(newVal)) {\n        newVal = mergeRecursively(targetVal, newVal, extensions);\n      }\n\n      assignProp(carry, key, newVal, newComer);\n      return carry;\n    }, newObject);\n    return result;\n  }\n\n  function merge(origin) {\n    var newComers = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      newComers[_i - 1] = arguments[_i];\n    }\n\n    var extensions = null;\n    var base = origin;\n\n    if (isWhat.isPlainObject(origin) && origin.extensions && Object.keys(origin).length === 1) {\n      base = {};\n      extensions = origin.extensions;\n    }\n\n    return newComers.reduce(function (result, newComer) {\n      return mergeRecursively(result, newComer, extensions);\n    }, base);\n  }\n\n  function concatArrays(originVal, newVal) {\n    if (isWhat.isArray(originVal) && isWhat.isArray(newVal)) {\n      return originVal.concat(newVal);\n    }\n\n    return newVal;\n  }\n\n  exports.merge = merge;\n  exports.concatArrays = concatArrays;\n  exports.default = merge;\n});","map":[[2,0,1,0],[4,0,3,0,"Object"],[4,2,3,0,"Object"],[4,8,3,6],[4,9,3,7,"defineProperty"],[4,23,3,0],[4,24,3,22,"exports"],[4,31,3,0],[4,33,3,31],[4,45,3,0],[4,47,3,45],[5,0,3,47,"value"],[5,4,3,47,"value"],[5,9,3,52],[5,11,3,54],[6,0,3,45],[6,3,3,0],[8,0,5,0],[8,6,5,4,"isWhat"],[8,12,5,10],[8,15,5,13,"require"],[8,26,5,20],[8,56,5,0],[10,0,7,0],[10,11,7,9,"assignProp"],[10,21,7,0],[10,22,7,20,"carry"],[10,27,7,0],[10,29,7,27,"key"],[10,32,7,0],[10,34,7,32,"newVal"],[10,40,7,0],[10,42,7,40,"originalObject"],[10,56,7,0],[10,58,7,56],[11,0,8,4],[11,8,8,8,"propType"],[11,16,8,16],[11,19,8,19,"originalObject"],[11,33,8,33],[11,34,8,34,"propertyIsEnumerable"],[11,54,8,19],[11,55,8,55,"key"],[11,58,8,19],[11,62,9,10],[11,74,8,19],[11,77,10,10],[11,92,8,4],[12,0,11,4],[12,8,11,8,"propType"],[12,16,11,16],[12,21,11,21],[12,33,11,4],[12,35,12,8,"carry"],[12,40,12,13],[12,41,12,14,"key"],[12,44,12,13],[12,45,12,8],[12,48,12,21,"newVal"],[12,54,12,8],[14,0,13,4],[14,8,13,8,"propType"],[14,16,13,16],[14,21,13,21],[14,36,13,4],[14,38,13,38],[15,0,14,8,"Object"],[15,6,14,8,"Object"],[15,12,14,14],[15,13,14,15,"defineProperty"],[15,27,14,8],[15,28,14,30,"carry"],[15,33,14,8],[15,35,14,37,"key"],[15,38,14,8],[15,40,14,42],[16,0,15,12,"value"],[16,8,15,12,"value"],[16,13,15,17],[16,15,15,19,"newVal"],[16,21,14,42],[17,0,16,12,"enumerable"],[17,8,16,12,"enumerable"],[17,18,16,22],[17,20,16,24],[17,25,14,42],[18,0,17,12,"writable"],[18,8,17,12,"writable"],[18,16,17,20],[18,18,17,22],[18,22,14,42],[19,0,18,12,"configurable"],[19,8,18,12,"configurable"],[19,20,18,24],[19,22,18,26],[20,0,14,42],[20,7,14,8],[21,0,20,5],[22,0,21,1],[24,0,22,0],[24,11,22,9,"mergeRecursively"],[24,27,22,0],[24,28,22,26,"origin"],[24,34,22,0],[24,36,22,34,"newComer"],[24,44,22,0],[24,46,22,44,"extensions"],[24,56,22,0],[24,58,22,56],[25,0,24,4],[25,8,24,8],[25,9,24,9,"isWhat"],[25,15,24,15],[25,16,24,16,"isPlainObject"],[25,29,24,9],[25,30,24,30,"newComer"],[25,38,24,9],[25,39,24,4],[25,41,24,41],[26,0,26,8],[26,10,26,12,"extensions"],[26,20,26,22],[26,24,26,26,"isWhat"],[26,30,26,32],[26,31,26,33,"isArray"],[26,38,26,26],[26,39,26,41,"extensions"],[26,49,26,26],[26,50,26,8],[26,52,26,54],[27,0,27,12,"extensions"],[27,8,27,12,"extensions"],[27,18,27,22],[27,19,27,23,"forEach"],[27,26,27,12],[27,27,27,31],[27,37,27,41,"extend"],[27,43,27,31],[27,45,27,49],[28,0,28,16,"newComer"],[28,10,28,16,"newComer"],[28,18,28,24],[28,21,28,27,"extend"],[28,27,28,33],[28,28,28,34,"origin"],[28,34,28,33],[28,36,28,42,"newComer"],[28,44,28,33],[28,45,28,16],[29,0,29,13],[29,9,27,12],[30,0,30,9],[32,0,31,8],[32,13,31,15,"newComer"],[32,21,31,8],[33,0,32,5],[35,0,34,4],[35,8,34,8,"newObject"],[35,17,34,17],[35,20,34,20],[35,22,34,4],[37,0,35,4],[37,8,35,8,"isWhat"],[37,14,35,14],[37,15,35,15,"isPlainObject"],[37,28,35,8],[37,29,35,29,"origin"],[37,35,35,8],[37,36,35,4],[37,38,35,38],[38,0,36,8],[38,10,36,12,"props_1"],[38,17,36,19],[38,20,36,22,"Object"],[38,26,36,28],[38,27,36,29,"getOwnPropertyNames"],[38,46,36,22],[38,47,36,49,"origin"],[38,53,36,22],[38,54,36,8],[39,0,37,8],[39,10,37,12,"symbols_1"],[39,19,37,21],[39,22,37,24,"Object"],[39,28,37,30],[39,29,37,31,"getOwnPropertySymbols"],[39,50,37,24],[39,51,37,53,"origin"],[39,57,37,24],[39,58,37,8],[40,0,38,8,"newObject"],[40,6,38,8,"newObject"],[40,15,38,17],[40,18,38,20,"props_1"],[40,25,38,27],[40,26,38,28,"concat"],[40,32,38,20],[40,33,38,35,"symbols_1"],[40,42,38,20],[40,44,38,46,"reduce"],[40,50,38,20],[40,51,38,53],[40,61,38,63,"carry"],[40,66,38,53],[40,68,38,70,"key"],[40,71,38,53],[40,73,38,75],[41,0,40,12],[41,12,40,16,"targetVal"],[41,21,40,25],[41,24,40,28,"origin"],[41,30,40,34],[41,31,40,35,"key"],[41,34,40,34],[41,35,40,12],[43,0,41,12],[43,12,41,17],[43,13,41,18,"isWhat"],[43,19,41,24],[43,20,41,25,"isSymbol"],[43,28,41,18],[43,29,41,34,"key"],[43,32,41,18],[43,33,41,17],[43,37,41,42],[43,38,41,43,"Object"],[43,44,41,49],[43,45,41,50,"getOwnPropertyNames"],[43,64,41,43],[43,65,41,70,"newComer"],[43,73,41,43],[43,75,41,80,"includes"],[43,83,41,43],[43,84,41,89,"key"],[43,87,41,43],[43,88,41,16],[43,92,42,17,"isWhat"],[43,98,42,23],[43,99,42,24,"isSymbol"],[43,107,42,17],[43,108,42,33,"key"],[43,111,42,17],[43,116,42,41],[43,117,42,42,"Object"],[43,123,42,48],[43,124,42,49,"getOwnPropertySymbols"],[43,145,42,42],[43,146,42,71,"newComer"],[43,154,42,42],[43,156,42,81,"includes"],[43,164,42,42],[43,165,42,90,"key"],[43,168,42,42],[43,169,41,12],[43,171,42,97],[44,0,43,16,"assignProp"],[44,10,43,16,"assignProp"],[44,20,43,26],[44,21,43,27,"carry"],[44,26,43,26],[44,28,43,34,"key"],[44,31,43,26],[44,33,43,39,"targetVal"],[44,42,43,26],[44,44,43,50,"origin"],[44,50,43,26],[44,51,43,16],[45,0,44,13],[47,0,45,12],[47,15,45,19,"carry"],[47,20,45,12],[48,0,46,9],[48,7,38,20],[48,9,46,11],[48,11,38,20],[48,12,38,8],[49,0,47,5],[51,0,48,4],[51,8,48,8,"props"],[51,13,48,13],[51,16,48,16,"Object"],[51,22,48,22],[51,23,48,23,"getOwnPropertyNames"],[51,42,48,16],[51,43,48,43,"newComer"],[51,51,48,16],[51,52,48,4],[52,0,49,4],[52,8,49,8,"symbols"],[52,15,49,15],[52,18,49,18,"Object"],[52,24,49,24],[52,25,49,25,"getOwnPropertySymbols"],[52,46,49,18],[52,47,49,47,"newComer"],[52,55,49,18],[52,56,49,4],[53,0,50,4],[53,8,50,8,"result"],[53,14,50,14],[53,17,50,17,"props"],[53,22,50,22],[53,23,50,23,"concat"],[53,29,50,17],[53,30,50,30,"symbols"],[53,37,50,17],[53,39,50,39,"reduce"],[53,45,50,17],[53,46,50,46],[53,56,50,56,"carry"],[53,61,50,46],[53,63,50,63,"key"],[53,66,50,46],[53,68,50,68],[54,0,52,8],[54,10,52,12,"newVal"],[54,16,52,18],[54,19,52,21,"newComer"],[54,27,52,29],[54,28,52,30,"key"],[54,31,52,29],[54,32,52,8],[55,0,53,8],[55,10,53,12,"targetVal"],[55,19,53,21],[55,22,53,25,"isWhat"],[55,28,53,31],[55,29,53,32,"isPlainObject"],[55,42,53,25],[55,43,53,46,"origin"],[55,49,53,25],[55,50,53,24],[55,53,55,14,"origin"],[55,59,55,20],[55,60,55,21,"key"],[55,63,55,20],[55,64,53,24],[55,67,56,14,"undefined"],[55,76,53,8],[57,0,58,8],[57,10,58,12,"extensions"],[57,20,58,22],[57,24,58,26,"isWhat"],[57,30,58,32],[57,31,58,33,"isArray"],[57,38,58,26],[57,39,58,41,"extensions"],[57,49,58,26],[57,50,58,8],[57,52,58,54],[58,0,59,12,"extensions"],[58,8,59,12,"extensions"],[58,18,59,22],[58,19,59,23,"forEach"],[58,26,59,12],[58,27,59,31],[58,37,59,41,"extend"],[58,43,59,31],[58,45,59,49],[59,0,60,16,"newVal"],[59,10,60,16,"newVal"],[59,16,60,22],[59,19,60,25,"extend"],[59,25,60,31],[59,26,60,32,"targetVal"],[59,35,60,31],[59,37,60,43,"newVal"],[59,43,60,31],[59,44,60,16],[60,0,61,13],[60,9,59,12],[61,0,62,9],[63,0,64,8],[63,10,64,12,"targetVal"],[63,19,64,21],[63,24,64,26,"undefined"],[63,33,64,12],[63,37,64,39,"isWhat"],[63,43,64,45],[63,44,64,46,"isPlainObject"],[63,57,64,39],[63,58,64,60,"newVal"],[63,64,64,39],[63,65,64,8],[63,67,64,69],[64,0,65,12,"newVal"],[64,8,65,12,"newVal"],[64,14,65,18],[64,17,65,21,"mergeRecursively"],[64,33,65,37],[64,34,65,38,"targetVal"],[64,43,65,37],[64,45,65,49,"newVal"],[64,51,65,37],[64,53,65,57,"extensions"],[64,63,65,37],[64,64,65,12],[65,0,66,9],[67,0,67,8,"assignProp"],[67,6,67,8,"assignProp"],[67,16,67,18],[67,17,67,19,"carry"],[67,22,67,18],[67,24,67,26,"key"],[67,27,67,18],[67,29,67,31,"newVal"],[67,35,67,18],[67,37,67,39,"newComer"],[67,45,67,18],[67,46,67,8],[68,0,68,8],[68,13,68,15,"carry"],[68,18,68,8],[69,0,69,5],[69,5,50,17],[69,7,69,7,"newObject"],[69,16,50,17],[69,17,50,4],[70,0,70,4],[70,11,70,11,"result"],[70,17,70,4],[71,0,71,1],[73,0,81,0],[73,11,81,9,"merge"],[73,16,81,0],[73,17,81,15,"origin"],[73,23,81,0],[73,25,81,23],[74,0,82,4],[74,8,82,8,"newComers"],[74,17,82,17],[74,20,82,20],[74,22,82,4],[76,0,83,4],[76,9,83,9],[76,13,83,13,"_i"],[76,15,83,15],[76,18,83,18],[76,19,83,4],[76,21,83,21,"_i"],[76,23,83,23],[76,26,83,26,"arguments"],[76,35,83,35],[76,36,83,36,"length"],[76,42,83,4],[76,44,83,44,"_i"],[76,46,83,46],[76,48,83,4],[76,50,83,50],[77,0,84,8,"newComers"],[77,6,84,8,"newComers"],[77,15,84,17],[77,16,84,18,"_i"],[77,18,84,20],[77,21,84,23],[77,22,84,17],[77,23,84,8],[77,26,84,28,"arguments"],[77,35,84,37],[77,36,84,38,"_i"],[77,38,84,37],[77,39,84,8],[78,0,85,5],[80,0,86,4],[80,8,86,8,"extensions"],[80,18,86,18],[80,21,86,21],[80,25,86,4],[81,0,87,4],[81,8,87,8,"base"],[81,12,87,12],[81,15,87,15,"origin"],[81,21,87,4],[83,0,88,4],[83,8,88,8,"isWhat"],[83,14,88,14],[83,15,88,15,"isPlainObject"],[83,28,88,8],[83,29,88,29,"origin"],[83,35,88,8],[83,40,88,40,"origin"],[83,46,88,46],[83,47,88,47,"extensions"],[83,57,88,8],[83,61,88,61,"Object"],[83,67,88,67],[83,68,88,68,"keys"],[83,72,88,61],[83,73,88,73,"origin"],[83,79,88,61],[83,81,88,81,"length"],[83,87,88,61],[83,92,88,92],[83,93,88,4],[83,95,88,95],[84,0,89,8,"base"],[84,6,89,8,"base"],[84,10,89,12],[84,13,89,15],[84,15,89,8],[85,0,90,8,"extensions"],[85,6,90,8,"extensions"],[85,16,90,18],[85,19,90,21,"origin"],[85,25,90,27],[85,26,90,28,"extensions"],[85,36,90,8],[86,0,91,5],[88,0,92,4],[88,11,92,11,"newComers"],[88,20,92,20],[88,21,92,21,"reduce"],[88,27,92,11],[88,28,92,28],[88,38,92,38,"result"],[88,44,92,28],[88,46,92,46,"newComer"],[88,54,92,28],[88,56,92,56],[89,0,93,8],[89,13,93,15,"mergeRecursively"],[89,29,93,31],[89,30,93,32,"result"],[89,36,93,31],[89,38,93,40,"newComer"],[89,46,93,31],[89,48,93,50,"extensions"],[89,58,93,31],[89,59,93,8],[90,0,94,5],[90,5,92,11],[90,7,94,7,"base"],[90,11,92,11],[90,12,92,4],[91,0,95,1],[93,0,97,0],[93,11,97,9,"concatArrays"],[93,23,97,0],[93,24,97,22,"originVal"],[93,33,97,0],[93,35,97,33,"newVal"],[93,41,97,0],[93,43,97,41],[94,0,98,4],[94,8,98,8,"isWhat"],[94,14,98,14],[94,15,98,15,"isArray"],[94,22,98,8],[94,23,98,23,"originVal"],[94,32,98,8],[94,37,98,37,"isWhat"],[94,43,98,43],[94,44,98,44,"isArray"],[94,51,98,37],[94,52,98,52,"newVal"],[94,58,98,37],[94,59,98,4],[94,61,98,61],[95,0,100,8],[95,13,100,15,"originVal"],[95,22,100,24],[95,23,100,25,"concat"],[95,29,100,15],[95,30,100,32,"newVal"],[95,36,100,15],[95,37,100,8],[96,0,101,5],[98,0,102,4],[98,11,102,11,"newVal"],[98,17,102,4],[99,0,103,1],[101,0,105,0,"exports"],[101,2,105,0,"exports"],[101,9,105,7],[101,10,105,8,"merge"],[101,15,105,0],[101,18,105,16,"merge"],[101,23,105,0],[102,0,106,0,"exports"],[102,2,106,0,"exports"],[102,9,106,7],[102,10,106,8,"concatArrays"],[102,22,106,0],[102,25,106,23,"concatArrays"],[102,37,106,0],[103,0,107,0,"exports"],[103,2,107,0,"exports"],[103,9,107,7],[103,10,107,8,"default"],[103,17,107,0],[103,20,107,18,"merge"],[103,25,107,0]]},"type":"js/module"}]}